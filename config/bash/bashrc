# .bashrc

# ===== Sourcing other files =====
[[ -f /etc/bashrc ]] && . /etc/bashrc

# ===== History ===== #
shopt -s cmdhist  # Store multiline commands on one line in history
shopt -s histappend  # Append to history instead of overwriting
HISTTIMEFORMAT="%h %d %H:%M:%S "
HISTSIZE=10000
HISTFILESIZE=10000
HISTCONTROL=erasedups

# ===== Settings =====
shopt -s checkwinsize  # Handle window size changes
shopt -s globstar  # Support ** globbing

if [ -t 1 ]; then
	[[ -f ~/.bash_aliases ]] && . ~/.bash_aliases && cd .
	[[ -f ~/.bash_funcs ]] && . ~/.bash_funcs
	[[ -f ~/.sensible.bash ]] && . ~/.sensible.bash
	[[ -f ~/.forgit.bash ]] && . ~/.forgit.bash

	shopt -s histverify  # Expand history before executing when using bangs
	shopt -s direxpand  # Expand filenames
	shopt -s autocd  # When typing just a dir name, cd to it
	shopt -s cdspell  # Fix typos when cd-ing
	shopt -s dirspell  # Fix typos in dir names

	# Keys
	bind '"\t":menu-complete'
	bind '"\e[Z":menu-complete-backward'
	bind 'set mark-symlinked-directories on'
	bind '"\C-h": backward-kill-word'
	bind '"\e[3;5~": kill-word'

	complete -d cd
fi

# Enable Docker BuildKit
export DOCKER_BUILDKIT=1
export COMPOSE_DOCKER_CLI_BUILD=1
export BUILDKIT_PROGRESS=plain

# ===== Colors =====
if [[ -x /usr/bin/dircolors ]]; then
	#test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"

	alias ls='ls --color=auto'
	alias grep='grep --color=auto'
	alias fgrep='fgrep --color=auto'
	alias egrep='egrep --color=auto'
fi

# ===== Exports =====
# Coloured prompt
COLOR_RED="\033[0;31m"
COLOR_YELLOW="\033[0;33m"
COLOR_GREEN="\033[0;32m"
COLOR_OCHRE="\033[38;5;95m"
COLOR_BLUE="\033[38;5;14m"
COLOR_WHITE="\033[0;37m"
COLOR_RESET="\033[0m"
COLOR_YELLOW="\033[38;5;11m"
COLOR_DARK_GREEN="\033[38;5;28m"

function colorize() {
	# Takes a color code and a string and echos that string in that color
	# Handles resetting the color afterwards
	color_code="$1"
	str="$2"
	[[ -n $str && $str != '' ]] && echo "\[$color_code\]$str\[$COLOR_RESET\]"
}

function git_color {
	git_status="$(git status 2> /dev/null)"
	[[ $? > 0 ]] && exit 0

	if [[ ! $git_status =~ "working tree clean" && ! $git_status =~ "working directory clean" ]]; then
		echo -e $COLOR_YELLOW
	elif [[ $git_status =~ "Your branch is ahead of" ]]; then
		echo -e $COLOR_RED
	elif [[ $git_status =~ "nothing to commit" ]]; then
		echo -e $COLOR_GREEN
	else
		echo -e $COLOR_OCHRE
	fi
}

function git_branch {
	local git_status="$(git status 2> /dev/null)"
	local on_branch="On branch ([^${IFS}]*)"
	local on_commit="HEAD detached at ([^${IFS}]*)"

	if [[ $git_status =~ $on_branch ]]; then
		local branch=${BASH_REMATCH[1]}
		branch=$(echo $branch | rev | cut -d\/ -f1 | rev)  # Cut out stuff like 'user/feature/xyz' and just get the base branch name
		echo -n "($branch)"
	elif [[ $git_status =~ $on_commit ]]; then
		local commit=${BASH_REMATCH[1]}
		echo -n "($commit)"
	fi
}

function short_cwd {
	cwd_length=14
	cwd="${PWD/$HOME/\~}"

	if [[ $(echo $cwd | wc -c | tr -d " ") -gt $cwd_length ]]; then
		cwd=$(echo -n $cwd | awk -F '/' '{ print ".../" $(NF-1) "/" $(NF) }')
	else
		cwd="$(echo -n $cwd)"
	fi

	echo $cwd
}

standard_prompt="$(colorize $COLOR_BLUE '[')$(colorize $COLOR_YELLOW '\u@\h')$(colorize $COLOR_BLUE ']')"
color=git_color
branch=git_branch

export PROMPT_COMMAND='history -a; prompt="${standard_prompt} $(colorize $COLOR_BLUE `short_cwd`) $(colorize `git_color` `git_branch`) \$ "; export PS1=${prompt//  / }'

# Exports
command -v nvim >/dev/null && editor="nvim" || editor="vim"
export VISUAL='code'
export EDITOR=$editor
export SUDO_EDITOR=$editor
export PAGER="most"
export BAT_PAGER="less -XFR"
export LESS="--mouse --wheel-lines=3 -XFR"
opt="$HOME/opt"
JAVA_HOME="$opt/jdk-11/bin"
FLUTTER_ROOT="$opt/flutter"
ANDROID_HOME="$opt/Android/SDK"
WINHOME=/mnt/c/Users/DanielStewart/
plenvpath="$HOME/.plenv/bin/"
rbenvpath="$HOME/.rbenv/bin/"
pyenvpath="$HOME/.pyenv/bin/"

# Build $PATH
exists=()
paths=(
	"$HOME/bin"
	"$HOME/.local/bin"
	"$plenvpath"
	"$rbenvpath"
	"$pyenvpath"
	"$opt/kotlinc/bin/"
	"$opt/flutter/bin/"
	"$opt/dart-sdk/bin/"
	"$JAVA_HOME"
	"$FLUTTER_ROOT"
	"$ANDROID_HOME"
	"$HOME/.cargo/bin/"
	"/usr/local/go/bin/"
	"$HOME/go/bin/"
	"/home/linuxbrew/.linuxbrew/bin/"
	"$HOME/.local/share/pypoetry/venv/bin/"
)

# Filter non existent paths
for item in "${paths[@]}"; do [[ -e $item ]] && exists+=("$item"); done

[[ -d $WINHOME ]] && export WINHOME
[[ -e $JAVA_HOME ]] && export JAVA_HOME
[[ -e $FLUTTER_ROOT ]] && export FLUTTER_ROOT
[[ -e $ANDROID_HOME ]] && export ANDROID_HOME
export PATH="$(IFS=: eval 'echo "${exists[*]}"'):$PATH"

# Initialise some stuff
[[ -d $plenvpath ]] && eval "$(plenv init -)"
[[ -d $rbenvpath ]] && eval "$(rbenv init -)"
if [[ -d $pyenvpath ]]; then
	eval "$(pyenv init -)"
	eval "$(pyenv init --path)"
fi

# fzf
export FZF_DEFAULT_OPTS='--reverse --border --exact'
[[ -f ~/.fzf.bash ]] && source ~/.fzf.bash
[[ -f /usr/share/fzf/shell/key-bindings.bash ]] && source /usr/share/fzf/shell/key-bindings.bash
[[ -f /usr/share/doc/fzf/examples/key-bindings.bash ]] && source /usr/share/doc/fzf/examples/key-bindings.bash
[[ -f /usr/share/doc/fzf/examples/completion.bash ]] && source /usr/share/doc/fzf/examples/completion.bash

# bash autocompletion
for file in git docker docker-compose; do
	if [[ -f /usr/share/bash-completion/completions/$file ]]; then
		source /usr/share/bash-completion/completions/$file
	fi
done

# Pass
[[ -f ~/.password-store/.bash-completion ]] && source ~/.password-store/.bash-completion

# SSH
eval $(ssh-agent -s) > /dev/null 2>&1
ssh-add $HOME/.ssh/id_rsa > /dev/null 2>&1

for i in $HOME/.ssh/*.pem; do
	ssh-add $i > /dev/null 2>&1
done

# Source Cargo env
if [[ -e "$HOME/.cargo/env" ]]; then
	source "$HOME/.cargo/env"
fi

# WSL specific stuff
if [[ -n $WSLENV ]]; then
	export WSL_ip_line=$(ipconfig.exe | grep "WSL" -n | awk -F ":" '{print $1+4}')
	export DISPLAY=$(ipconfig.exe | awk -v a=$WSL_ip_line '{if (NR==a) print $NF":0.0"}' | tr -d "\r")
	export LIBGL_ALWAYS_INDIRECT=1
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Auto-activate hermit
eval "$(test -x $HOME/bin/hermit && $HOME/bin/hermit shell-hooks --print --bash)"
. "$HOME/.cargo/env"
