# DNF
alias dnfi='sudo dnf install'
alias dnfu='sudo dnf update'
alias dnfr='sudo dnf remove'
alias dnfs='sudo dnf search'
alias dnfl='sudo dnf list'
alias dnfcu='sudo dnf check-update'
alias dnfca='sudo dnf clean all'
alias dnfar='sudo dnf autoremove'

# Versioning
alias py2='python'
alias py='python3'
alias py3='python3'
alias gpg='gpg2'
alias more='less'

if command -v batcat >/dev/null 2>&1; then
	alias cat='batcat'
fi

if command -v fdfind >/dev/null 2>&1; then
	alias fd='fdfind'
fi

if command -v colordiff >/dev/null 2>&1; then
	alias diff='colordiff'
fi

if [[ $(type -P podman) && ! $(type -P docker) ]]; then
	alias docker='podman'
	alias docker-compose='podman-compose'
fi

# Vim
if command -v nvim >/dev/null 2>&1; then
	alias vi='nvim'
	alias vim='nvim'
	alias view='nvim -R'
else
	alias vi='vim'
	alias view='vim -R'
fi

# Other
alias h='history'
alias cl='clear'
alias ls='ls --color=auto'
alias la='ls -Al'
alias rm='rm -i'
alias mv='mv -i'
alias sudo='sudo '
alias perltidy='perltidy -l=0 -pt=2 -sbt=2 -bt=2 -blbs=2 -lbl=1 -bbb -mbl=2 -kbl=0 -et=4 -ce'
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias z='zellij'

# cd
alias ..='cd ..'
alias ...='..;..'
alias ....='..;..;..'
alias .....='..;..;..;..'

#SSH
alias ssh='ssh -XYt'

# Diff
alias gitdiff="git difftool --no-symlinks --dir-diff"

# Functions
function hlgrep() {
	# grep but it prints the entire input content and highlights the matches
	grep --color -E "$1|\$" $2
}

# Git wrapper for work repos
function ttekgit() {
	ACTION=$1 && shift
	ARGS="$@"

	if [[ $ACTION != 'clone' ]]; then
		git config user.name 'Dan Stewart' >/dev/null 2>&1
		git config user.email 'daniel@traveltek.net' >/dev/null 2>&1
	fi

	if [[ "$ARGS" ]]; then
		GIT_SSH_COMMAND='ssh -i $HOME/.ssh/id_rsa_traveltek' git $ACTION $ARGS
	else
		GIT_SSH_COMMAND='ssh -i $HOME/.ssh/id_rsa_traveltek' git $ACTION
	fi
}

# Git wrapper for personal repos
function mygit() {
	ACTION=$1 && shift
	ARGS="$@"

	if [[ $ACTION != 'clone' ]]; then
		git config user.name 'Dan Stewart' >/dev/null 2>&1
		git config user.email 'danielandrewstewart@gmail.com' >/dev/null 2>&1
	fi

	if [[ "$ARGS" ]]; then
		GIT_SSH_COMMAND='ssh -i $HOME/.ssh/id_rsa_personal' git $ACTION $ARGS
	else
		GIT_SSH_COMMAND='ssh -i $HOME/.ssh/id_rsa_personal' git $ACTION
	fi
}

# perl -c all edited files
function perl_check() {
	while read status filename; do
		if [[ $filename == *.pm || $filename == *.pl ]]; then
			echo "==> $filename"
			perl -I local/lib/perl5/ -I modules/ -c $filename
			echo
		fi
	done < <(git status --porcelain | egrep -v "^ ?D ")
}

# tail -f with a bunch of grep -v
function clean_tail() {
	file=$1

	tail -n 0 -f $file | grep -v --line-buffered uninitialized | grep -v --line-buffered 'has gone away' | grep -v --line-buffered 'Prototype mismatch' | egrep -v --line-buffered '^ at' | grep --line-buffered -v 'Use of uninitialized' | grep --line-buffered -v 'Constant subroutine redefined' | grep --line-buffered -v 'Prototype mismatch'
}

# Take JSON from pipe or file and format it and page it through less
function json() {
	file="$1"
	[[ -z $file ]] && file=/dev/stdin
	jq -C . "$file" | less -R
}

# Auto activate python venv
function cd() {
	builtin cd "$@"

	# If env folder is found then activate the virtualenv
	if [[ -d ./venv ]] ; then
		source ./venv/bin/activate
	fi

	# If we are no longer within our active venv then deactivate
	if [[ -n "$VIRTUAL_ENV" ]] ; then
		venvparent="$(dirname "$VIRTUAL_ENV")"
		if [[ "$(pwd -P)"/ != "$venvparent"/* ]] ; then
			deactivate
		fi
	fi
}

# FZF Stuff
function git-br() {
	# Git branch management
	# Mode:
	#  ls|co -> Checkout the selected branch
	#  rm -> Delete the selected branches
	mode=$1
	limit=1

	[[ $mode == 'rm' ]] && limit=999

	results=$(git branch | grep --invert-match '\*' | cut -c 3- |
		fzf \
		--multi=$limit \
		--ansi \
		--color=dark \
		--preview="git log --color=always {} --" \
		--preview-window=down:70%:wrap)

	if [[ $mode == 'co' || $mode == 'ls' || -z $mode ]]; then
		echo $results | xargs --no-run-if-empty git checkout
	elif [[ $mode == 'rm' ]]; then
		echo $results | xargs --no-run-if-empty git branch --delete --force
	fi
}

function gh-pr() {
	local jq_template pr_number

	jq_template='"'\
'#\(.number) - \(.title)'\
'\t'\
'Author: \(.user.login)\n'\
'Created: \(.created_at)\n'\
'Updated: \(.updated_at)\n\n'\
'\(.body)'\
'"'

	pr_number=$(
		gh api 'repos/:owner/:repo/pulls' |
		jq ".[] | $jq_template" |
		sed -e 's/"\(.*\)"/\1/' -e 's/\\t/\t/' |
		fzf \
		--with-nth=1 \
		--delimiter='\t' \
		--preview='echo -e {2}' \
		--preview-window=bottom:70%:wrap |
		sed 's/^#\([0-9]\+\).*/\1/'
	)

	if [ -n "$pr_number" ]; then
		git checkout main
		gh pr checkout "$pr_number"
	fi
}
