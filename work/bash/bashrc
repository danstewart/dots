# .bashrc

# ===== Sourcing other files =====
[[ -f /etc/bashrc ]] && . /etc/bashrc

shopt -s checkwinsize
shopt -s histappend
shopt -s globstar
HISTSIZE=1000
HISTFILESIZE=2000

# ===== Settings =====
if [ -t 1 ]; then
	[[ -f ~/.bash_aliases ]] && . ~/.bash_aliases
	[[ -f ~/.bash_funcs ]] && . ~/.bash_funcs
	[[ -f ~/.sensible.bash ]] && . ~/.sensible.bash

	shopt -s histverify  # Expand history before executing when using bangs
	shopt -s autocd
	shopt -s cdspell
	shopt -s direxpand dirspell
	bind '"\t":menu-complete'
	bind '"\e[Z":menu-complete-backward'
	bind 'set mark-symlinked-directories on'
	bind '"\C-h": backward-kill-word'
	bind '"\e[3;5~": kill-word'

	complete -d cd
fi

# ===== Colors =====
if [[ -x /usr/bin/dircolors ]]; then
	test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"

	alias ls='ls --color=auto'
	alias grep='grep --color=auto'
	alias fgrep='fgrep --color=auto'
	alias egrep='egrep --color=auto'
fi

# ===== Exports =====
# Coloured prompt
COLOR_RED="\033[0;31m"
COLOR_YELLOW="\033[0;33m"
COLOR_GREEN="\033[0;32m"
COLOR_OCHRE="\033[38;5;95m"
COLOR_BLUE="\033[0;34m"
COLOR_WHITE="\033[0;37m"
COLOR_RESET="\033[0m"

function git_color {
	git_status="$(git status 2> /dev/null)"
	[[ $? > 0 ]] && exit 0

	if [[ ! $git_status =~ "working tree clean" && ! $git_status =~ "working directory clean" ]]; then
		echo -e $COLOR_YELLOW
	elif [[ $git_status =~ "Your branch is ahead of" ]]; then
		echo -e $COLOR_RED
	elif [[ $git_status =~ "nothing to commit" ]]; then
		echo -e $COLOR_GREEN
	else
		echo -e $COLOR_OCHRE
	fi
}

function git_branch {
	local git_status="$(git status 2> /dev/null)"
	local on_branch="On branch ([^${IFS}]*)"
	local on_commit="HEAD detached at ([^${IFS}]*)"

	if [[ $git_status =~ $on_branch ]]; then
		local branch=${BASH_REMATCH[1]}
		echo "($branch) "
	elif [[ $git_status =~ $on_commit ]]; then
		local commit=${BASH_REMATCH[1]}
		echo "($commit) "
	fi
}

standard_prompt='\[\033[38;5;14m\][\[$(tput bold)\]\[$(tput sgr0)\]\[\033[38;5;11m\]\u@\h\[$(tput sgr0)\]\[$(tput sgr0)\]\[\033[38;5;15m\] \[$(tput sgr0)\]\[\033[38;5;10m\]\w\[$(tput sgr0)\]\[\033[38;5;14m\]]\[$(tput sgr0)\]\[\033[38;5;15m\] \[$(tput sgr0)\]'
color=git_color
branch=git_branch
export PROMPT_COMMAND='color=$(git_color); branch=$(git_branch); export PS1="${standard_prompt}\[${color}\]${branch}\[$COLOR_RESET\]\$ "; unset color; unset branch'

# Exports
opt="$HOME/opt"
TEKAPPPATH="/home/dstewart/Code/apps/app-travelshops/"
JAVA_HOME="$opt/jdk-11/bin"
FLUTTER_ROOT="$opt/flutter"
ANDROID_HOME="$opt/Android/SDK"
plenvpath="$HOME/.plenv/bin"
rbenvpath="$HOME/.rbenv/bin"

# Build $PATH
exists=()
paths=(
	"$HOME/bin"
	"$plenvpath"
	"$rbenvpath"
	"$opt/kotlinc/bin"
	"$opt/flutter/bin"
	"$opt/dart-sdk/bin"
	"$JAVA_HOME"
	"$FLUTTER_ROOT"
	"$ANDROID_HOME"
)

# Filter non existent paths
for item in "${paths[@]}"; do [[ -e $item ]] && exists+=("$item"); done

[[ -e $JAVA_HOME ]] && export JAVA_HOME
[[ -e $FLUTTER_ROOT ]] && export FLUTTER_ROOT
[[ -e $ANDROID_HOME ]] && export ANDROID_HOME
[[ -e $TEKAPPPATH ]] && export TEKAPPPATH
export PATH="$(IFS=: eval 'echo "${exists[*]}"'):$PATH"


# Init
[[ -d $plenvpath ]] && eval "$(plenv init -)"
[[ -d $rbenvpath ]] && eval "$(rbenv init -)"
[[ -f ~/.fzf.bash ]] && source ~/.fzf.bash

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[ -f /home/dstewart/.nvm/versions/node/v11.7.0/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.bash ] && . /home/dstewart/.nvm/versions/node/v11.7.0/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.bash
